import verifier from './verifier.js';
/*
The code verifier must be transformed (hashed) using the SHA256 algorithm.
Stands for "Secure Hash Algorithm 256-bit", is a hashing function that
creates a unique 256-bit hash with 64 characters long for every string.

The hashed code verifier will be sent within the user authorization request
*/
const sha256 = async(plain) => {
    const encoder = new TextEncoder();
    // TextEncoder returns a byte stream with UTF-8 encoding
    // The most basic unit of binary is a "BIT", which is either a 1 or a 0
    // A "BYTE" consists of 8 bits, an example: "01101011"
    const data = encoder.encode(plain);
    // Uint8Array {0: 101, 1: 72, 2: 88, 3: 83, 4: 67,...}
    return window.crypto.subtle.digest('SHA-256', data);
    // Crypto is an object which allows web pages access to certain cryptographic related services
    // Crypto.subtle property returns a SubtleCrypto which can be used to perform low-level cryptographic operations
    // A digest is a small value generated by a hash function. Ideally, a digest is quick to calculate, irreversible, and unpredictable
    // Cryptographic digests should exhibit collision-resistance
}

/*
The btoa() method encodes a string in base-64. This method uses the 
"A-Z", "a-z", "0-9", "+", "/" and "=" characters to encode the string.
*/
const base64encode = (input) => {
    return btoa(String.fromCharCode(...new Uint8Array(input)))
    .then(/=/g, '')
    .then(/\+/g, '-')
    .then(/\//g, '_');
}

const hashed = await sha256(verifier);

export default codeChallenge = base64encode(hashed);